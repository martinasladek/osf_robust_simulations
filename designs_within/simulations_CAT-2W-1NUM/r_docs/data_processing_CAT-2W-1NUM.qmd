---
title: simulation processing
---

# Setup 

## Packages and functions

```{r}
library(dplyr, warn.conflicts = FALSE)
library(ggplot2)
library(purrr)

options(dplyr.summarise.inform = FALSE)

data_identifier = "CAT-2w1num"

text_as_fun <- function(function_string){
  eval(parse(text = function_string))
}

file_names <- list.files("../data/simulation_exports/", pattern = data_identifier)
file_paths <- list.files("../data/simulation_exports/", pattern = data_identifier, full.names = TRUE)

sim_list <- purrr::map(
  .x = file_paths, 
  .f = readRDS
)
```

## Pre-processing

Define variables for identifying unique cells 


```{r}
cell_ids <- c("design", "b", "n_rm", "target_skew", "target_kurt", "n_het_pred", "target_vr", "het_shape", "target_het", "n_het_pred")
```

Keep only terms of interest: gw adjusted for cov 

```{r}
sim_list <- purrr::map(
  .x = sim_list, 
  .f = \(x) x |> dplyr::filter(afex_nc_term == "gw")
)
```

Merge into a df:

```{r}
sim_df <- purrr::reduce(
  .x = sim_list, 
  .f = dplyr::bind_rows
)
```


# Summaries 

## Power/false-positives

```{r}
sim_df_power_sum <- sim_df |> 
  dplyr::select(all_of(cell_ids), afex_nc_p, contains("p.value")) |>
  tidyr::pivot_longer(
    cols = -c(all_of(cell_ids))
  ) |> 
  dplyr::mutate(
    is_sig = value < 0.05
  ) |> 
   dplyr::filter(!is.na(is_sig), name != "afex_gg_p") |>
  dplyr::group_by(across(c(all_of(cell_ids), name))) |> 
  dplyr::summarise(
    prop_sig = sum(is_sig, na.rm = TRUE)/length(is_sig)
  ) |> 
  dplyr::mutate(
    plot_group = paste0(
      "Skewness = ", target_skew, "; kurtosis = ", target_kurt, "\n", 
      "n_het_pred = ", n_het_pred, "; vr = ", target_vr, 
      "; het_shape = ", het_shape, "; target_het = ", target_het
    )
  )
```

```{r fig.height=30, fig.width=10}
sim_df_power_sum |> 
  ggplot2::ggplot(aes(x = n_rm, y = prop_sig, linetype = name, colour = name)) + 
  geom_line() + 
  scale_x_continuous(breaks = unique(sim_df_power_sum$n_rm)) + 
  facet_grid(
    rows = vars(plot_group), cols = vars(b)) + 
  scale_colour_viridis_d() + 
  theme_minimal() +
  theme(
    strip.text.y.right = element_text(angle = 0)
  )
```

## Coverage of CIs

```{r}
sim_df_cover_df <- sim_df |> 
  dplyr::select(all_of(cell_ids), contains("CI"), contains("ci")) |> 
  dplyr::mutate(row_id = 1:length(b)) |> 
  tidyr::pivot_longer(
    cols = -c(all_of(cell_ids), row_id)
  ) |> 
  dplyr::mutate(
    ci = ifelse(stringr::str_detect(name, "low"), "lower", "upper"), 
    name = stringr::str_remove_all(name, "_CI_low") |> 
      stringr::str_remove_all("_CI_high")  |> 
      stringr::str_remove_all("_ci.low") |> 
      stringr::str_remove_all("_ci.hi")
  ) |> 
  tidyr::pivot_wider(
    id_cols = c(all_of(cell_ids), name, row_id), 
    names_from = ci, values_from = value
  ) |> 
  dplyr::mutate(
    is_covered =  dplyr::between((-1*b), lower, upper)
  )  |> 
  dplyr::filter(!is.na(is_covered))

sim_df_cover_sum <- sim_df_cover_df |> 
  dplyr::group_by(across(c(all_of(cell_ids), name))) |> 
  dplyr::summarise(
    prop_covered = sum(is_covered, na.rm = TRUE)/length(is_covered)
  ) |> 
  dplyr::mutate(
    plot_group = paste0(
      "Skewness = ", target_skew, "; kurtosis = ", target_kurt, "\n", 
      "n_het_pred = ", n_het_pred, "; vr = ", target_vr, 
      "; het_shape = ", het_shape, "; target_het = ", target_het
    )
  )
```


```{r fig.height=30, fig.width=10 |> }
sim_df_cover_sum |> 
  ggplot2::ggplot(aes(x = n_rm, y = prop_covered, linetype = name, colour = name)) + 
  geom_line() + 
  scale_x_continuous(breaks = unique(sim_df_cover_sum$n_rm)) + 
  facet_grid(
    rows = vars(plot_group), cols = vars(b)) + 
  scale_colour_viridis_d() +
  theme_minimal() +
  theme(
    strip.text.y.right = element_text(angle = 0)
  ) 
```


## Bias in beta 

```{r fig.height=30, fig.width=10}
sim_df_bias_sum <- sim_df |> 
  dplyr::select(all_of(cell_ids), contains("diff"), contains("DIF")) |> 
  tidyr::pivot_longer(-all_of(cell_ids)) |> 
  dplyr::mutate(
    b_diff = (-1)*value - b
  )  |> 
  dplyr::group_by(across(c(all_of(cell_ids), name))) |> 
  dplyr::summarise(
    mean_diff = mean(b_diff, na.rm = TRUE), 
    sd_diff = sd(b_diff, na.rm = TRUE)
  ) |> 
  dplyr::mutate(
    plot_group = paste0(
      "Skewness = ", target_skew, "; kurtosis = ", target_kurt, "\n", 
      "n_het_pred = ", n_het_pred, "; vr = ", target_vr, 
      "; het_shape = ", het_shape, "; target_het = ", target_het
    )
  )
```

### Mean only 

```{r fig.height=30, fig.width=10}
sim_df_bias_sum |> 
  ggplot2::ggplot(aes(x = n_rm, y = mean_diff, linetype = name, colour = name)) +
  geom_point() + 
  geom_line() + 
  scale_x_continuous(breaks = unique(sim_df_bias_sum$n_rm)) + 
  facet_grid(
    rows = vars(plot_group), cols = vars(b), 
    scales = "free_y"
    ) + 
  scale_colour_viridis_d() +
  theme_minimal() +
  theme(
    strip.text.y.right = element_text(angle = 0)
  )
```

### SD only

```{r fig.height=30, fig.width=10}
sim_df_bias_sum |> 
  ggplot2::ggplot(aes(x = n_rm, y = sd_diff, linetype = name, colour = name)) +
  geom_point() + 
  geom_line() + 
  scale_x_continuous(breaks = unique(sim_df_bias_sum$n_rm)) + 
  facet_grid(
    rows = vars(plot_group), cols = vars(b), 
    scales = "free_y"
    ) + 
  scale_colour_viridis_d() +
  theme_minimal() +
  theme(
    strip.text.y.right = element_text(angle = 0)
  )
```

## Model errors 

```{r}
sim_df_model_errors_sum <- sim_df |> 
  dplyr::select(all_of(cell_ids), afex_nc_p, contains("p.value")) |> 
  tidyr::pivot_longer(-all_of(cell_ids)) |> 
  dplyr::filter(name != "afex_gg_p") |> 
  dplyr::group_by(across(c(all_of(cell_ids), name))) |> 
  dplyr::summarise(
    n_fail = sum(is.na(value))/length(value)
  ) |> 
  dplyr::mutate(
    plot_group = paste0(
      "Skewness = ", target_skew, "; kurtosis = ", target_kurt, "\n", 
      "n_het_pred = ", n_het_pred, "; vr = ", target_vr, 
      "; het_shape = ", het_shape, "; target_het = ", target_het
    )
  )


```

```{r fig.height=30, fig.width=10, fig.align='center'}
model_errors_plot <- sim_df_model_errors_sum |> 
  ggplot2::ggplot(aes(x = n_rm, y = n_fail, 
                      linetype = name, colour = name, shape = name)) + 
  geom_line() + 
  scale_x_continuous(breaks = unique(sim_df_model_errors_sum$n_rm)) + 
  facet_grid(
    rows = vars(plot_group), cols = vars(b)) + 
  scale_colour_viridis_d() +
  theme_minimal() +
  theme(
    strip.text.y.right = element_text(angle = 0)
  )
```



<!-- ```{r} -->
<!-- sim_export <- purrr::map( -->
<!--   .x = ls(pattern = "sum"), -->
<!--   .f = text_as_fun -->
<!-- ) -->

<!-- names(sim_export) <- ls(pattern = "sum") -->

<!-- saveRDS( -->
<!--   sim_export, -->
<!--   paste0( -->
<!--     "../data/processed_data/sim_export_", sim_export[[1]]$design[1], ".rds"), -->
<!-- ) -->
<!-- ``` -->



<!-- # Debugging  -->


<!-- ```{r} -->

<!-- #source("../scripts/parallel_setup_script.R") -->

<!-- start_iter <- 1 -->
<!-- n_iter = 1 -->
<!-- n_population = 100000 -->
<!-- global_seed <- 21023 -->

<!-- # Shared population parameters  -->
<!-- b <- c(0, 0.1, 0.3, 0.5) -->

<!-- n_ratio_rm <- c(1, 1.2, 2) -->

<!-- # Repeated measures sample metrics  -->
<!-- n_rm <- c(18, 65, 172) -->
<!-- n_rm <- n_population -->

<!-- cat_2w1num <- readr::read_csv("../data/simulation_grids/CAT-2W-1NUM.csv") -->

<!-- cat_2w1num_combinations <- dplyr::full_join( -->
<!--   tidyr::expand_grid( -->
<!--     design = "CAT-2w1num",  -->
<!--     combo_id = cat_2w1num$combo_id, -->
<!--     b, n_rm,  -->
<!--     iter = start_iter:n_iter -->
<!--   ),  -->
<!--   cat_2w1num |> dplyr::select(-design), -->
<!--   by = c("combo_id") -->
<!-- ) |>  -->
<!--   dplyr::mutate( -->
<!--     population_id = paste0(design, "_", combo_id, "_b_", b) -->
<!--   ) -->

<!-- cat_2w1num_sfs <- function( -->
<!--     #pop_i,  -->
<!--     n_rm){ -->

<!--   ## create a sample    -->
<!--   sample_ij_wide <- pop_i_wide |> dplyr::slice_sample(n = n_rm) -->
<!--   #sample_ij_wide <- pop_i_wide |> dplyr::slice_sample(n = 500) -->

<!--   sample_ij <- sample_ij_wide |> tidyr::pivot_longer(cols = -c(id, cov), names_to = "gw", values_to = "y") -->

<!--   #export_results(sample_ij, i = i, design_label = paste0("debugging")) -->


<!--   afex_mod_ij <- afex::aov_4(y ~ gw*cov + (gw|id), data = sample_ij, factorize = FALSE) |> suppressWarnings() -->
<!--   afex_summary_ij <- afex_nc_gg_summary("y ~ gw*cov + (gw|id)", data = sample_ij, factorize = FALSE) -->
<!--   afex_params_ij <- modelbased::estimate_contrasts( -->
<!--     afex_mod_ij, contrast = "gw", fixed = "cov", adjust = "none") |> as.data.frame() -->
<!--   names(afex_params_ij) <- paste0("afex_params_", names(afex_params_ij)) -->


<!--   x1_y1 = sample_ij[sample_ij$gw == 0, ] -->
<!--   x2_y2 = sample_ij[sample_ij$gw == 1, ] -->



<!--   rob_trim_output <-  -->
<!--     tryCatch( -->
<!--       expr = { -->
<!--         WRS::Dancova(x1_y1$cov, x1_y1$y, x2_y2$cov, x2_y2$y, tr = 0.2, plotit = FALSE)$output -->
<!--       },  -->
<!--       error = function(e) paste0(e) -->
<!--     ) -->

<!--   if(is.character(rob_trim_output)){ -->

<!--     rob_trim_mod_ij <- data.frame(X = NA, n = NA, DIF = NA, TEST = NA, se = NA, ci.low = NA, ci.hi = NA, p.value = NA, p.adjust = NA,  -->
<!--                                   error = rob_trim_output) -->

<!--   } else { -->

<!--   rob_trim_output_index <- floor(median(1:nrow(rob_trim_output))) -->

<!--   rob_trim_mod_ij <- rob_trim_output[rob_trim_output_index, ] |> t() |>  -->
<!--     as.data.frame() |>  -->
<!--     dplyr::mutate(error = NA_character_) -->

<!--   } -->
<!--   names(rob_trim_mod_ij) <- paste0("rob_trim_params_", names(rob_trim_mod_ij)) -->






<!--   rob_boot_output <-  -->
<!--     tryCatch( -->
<!--       expr = { -->
<!--         WRS::Dancovapb(x1_y1$cov, x1_y1$y, x2_y2$cov, x2_y2$y, tr = 0, plotit = FALSE, SEED = FALSE)$output -->
<!--       },  -->
<!--       error = function(e) paste0(e) -->
<!--     ) -->

<!--   if(is.character(rob_boot_output)){ -->

<!--     rob_boot_mod_ij <- data.frame(X = NA, n = NA, DIF = NA, TEST = NA, se = NA, ci.low = NA, ci.hi = NA, p.value = NA, p.adjust = NA,  -->
<!--                                   error = rob_boot_output) -->

<!--   } else { -->

<!--     rob_boot_output_index <- floor(median(1:nrow(rob_boot_output))) -->

<!--     rob_boot_mod_ij <- rob_boot_output[rob_boot_output_index, ] |> t() |>  -->
<!--       as.data.frame() |>  -->
<!--       dplyr::mutate(error = NA_character_) -->

<!--   } -->
<!--   names(rob_boot_mod_ij) <- paste0("rob_boot_params_", names(rob_boot_mod_ij)) -->





<!--   rob_trimboot_output <-  -->
<!--     tryCatch( -->
<!--       expr = { -->
<!--         WRS::Dancovapb(x1_y1$cov, x1_y1$y, x2_y2$cov, x2_y2$y, tr = 0.2, plotit = FALSE, SEED = FALSE)$output -->
<!--       },  -->
<!--       error = function(e) paste0(e) -->
<!--     ) -->

<!--   if(is.character(rob_trimboot_output)){ -->

<!--     rob_trimboot_mod_ij <- data.frame(X = NA, n = NA, DIF = NA, TEST = NA, se = NA, ci.low = NA, ci.hi = NA, p.value = NA, p.adjust = NA,  -->
<!--                                   error = rob_trimboot_output) -->

<!--   } else { -->

<!--     rob_trimboot_output_index <- floor(median(1:nrow(rob_trimboot_output))) -->

<!--     rob_trimboot_mod_ij <- rob_trimboot_output[rob_trimboot_output_index, ] |> t() |>  -->
<!--       as.data.frame() |>  -->
<!--       dplyr::mutate(error = NA_character_) -->

<!--   } -->
<!--   names(rob_trimboot_mod_ij) <- paste0("rob_trimboot_params_", names(rob_trimboot_mod_ij)) -->




<!--   dplyr::bind_cols( -->
<!--     afex_summary_ij, afex_params_ij,  -->
<!--     rob_trim_mod_ij, rob_boot_mod_ij, rob_trimboot_mod_ij -->
<!--   ) -->
<!-- } -->


<!-- generate_cat2w1num <- function( -->
<!--     n,  -->
<!--     b,  -->
<!--     sigma = 1,  -->
<!--     sigma_shift,  -->
<!--     min_bound,  -->
<!--     max_bound,  -->
<!--     nu, -->
<!--     tau,  -->
<!--     vp_val,  -->
<!--     vp_fun,  -->
<!--     mod_fun,  -->
<!--     cov_shift -->
<!-- ){ -->

<!--   #generate covariate:  -->
<!--   cov = rnorm(n, 0, 1) -->

<!--   #generate RM data:  -->
<!--   set.seed(global_seed)  -->
<!--   df <- faux::rnorm_multi( -->
<!--     n = n, vars = 2, r = 0.5, varnames = c(0, 1) -->
<!--   ) |>  -->
<!--     dplyr::mutate(id = 1:(n)) |>  -->
<!--     tidyr::pivot_longer(cols = -id, names_to = "gw",  values_to = "e") |>  -->
<!--     dplyr::arrange(gw) |>  -->
<!--     dplyr::mutate( -->
<!--       gw = as.numeric(gw),  -->
<!--       cov = c(cov, cov),  -->
<!--       e = transform_norm(raw_var = e, mu = 0, sigma = sigma, nu = nu, tau = tau), -->
<!--     ) -->

<!--   # calculate multipliers for setting up heteroscedasticty:  -->
<!--   cov_mult <- mod_fun(df$cov) -->
<!--   m_cont <- vp_fun(x = cov_mult, vp_val) -->
<!--   m_cat = ifelse(df$gw == 1, sigma + sigma_shift, sigma) -->
<!--   m_total = m_cont*m_cat -->
<!--   #m_total = 1 -->

<!--   # adjust errors and compute y -->
<!--   #cov_shift = 0.25 -->
<!--   #cov_shift = 0 -->
<!--   df <- df |>  -->
<!--     dplyr::mutate( -->
<!--       e = df$e * m_total, -->
<!--       e = squish(e, min_bound, max_bound),  -->
<!--       y = b*gw + (b-cov_shift)*cov + b*gw*cov + e -->
<!--     ) |>  -->
<!--     dplyr::select(-e) -->

<!--   return(df) -->

<!-- } -->
<!-- ``` -->

<!-- ## testing -->

<!-- ```{r} -->
<!-- sfs_results <- list() -->

<!-- comb_subset <- cat_2w1num_combinations |>  -->
<!--   dplyr::filter(target_skew == 0.5, target_kurt == 0.9, het_shape == "vp4", target_het == 0.9, n_het_pred == 2) -->

<!-- for(i in 1:nrow(comb_subset)){ -->
<!--   pop_row_i <- comb_subset[i, ] -->
<!--   pop_i <- generate_cat2w1num( -->
<!--     n = n_population, b = pop_row_i$b,   -->
<!--     min_bound = pop_row_i$min_bound, max_bound = pop_row_i$max_bound,  -->
<!--     vp_fun = text_as_fun(pop_row_i$vp_fun),  -->
<!--     mod_fun = text_as_fun(pop_row_i$mod_fun), -->
<!--     vp_val = pop_row_i$vp_val,  -->
<!--     sigma_shift = pop_row_i$sigma_shift,  -->
<!--     nu = pop_row_i$nu, tau = pop_row_i$tau,  -->
<!--     cov_shift =  pop_row_i$b*0.9 -->
<!--   ) -->

<!--   pop_i_wide <- pop_i |> tidyr::pivot_wider(id_cols = c(id, cov), names_from = gw, values_from = y) -->

<!--   # sfs_results_i <- cat_2w1num_sfs(n_rm = 1000) |>  -->
<!--   #   dplyr::select(afex_nc_term, contains("dif")) -->

<!--   afex_mod_ij <- afex::aov_4(y ~ gw*cov + (gw|id), data = pop_i, factorize = FALSE) |> suppressWarnings() -->

<!--   afex_params_ij <- modelbased::estimate_contrasts( -->
<!--     afex_mod_ij, contrast = "gw", fixed = "cov", adjust = "none") |> as.data.frame() -->
<!--   names(afex_params_ij) <- paste0("afex_params_", names(afex_params_ij)) -->

<!--   sfs_results[[i]] <- afex_params_ij |>  -->
<!--     dplyr::mutate( -->
<!--       b = comb_subset[i, ]$b,  -->
<!--       b_diff = (-1)*afex_params_Difference - b -->
<!--     )  -->

<!-- } -->

<!-- sfs_results |>  -->
<!--   purrr::reduce(dplyr::bind_rows) |>  -->
<!--   dplyr::select(afex_params_cov, b, afex_params_Difference,b_diff) -->
<!-- ``` -->

